/*#include <16f887.h>
#fuses intrc_io
#use delay(clock=8M)

#use RS232 (baud =9600,xmit=pin_c6, rcv=pin_c7)

#define ON_OFF pin_b0

unsigned int8 time=0;
int1 mode=0;
unsigned int8 rcv_data=0;

void main ()
{
   set_tris_c(0x80);
   set_tris_d(0); 
   set_tris_b(1); 
   
   enable_interrupts(GLOBAL);
   enable_interrupts(INT_RDA); 

   while(true)
   {
      if(input(ON_OFF)==0)
      {
         delay_ms(20);
         if(input(ON_OFF)==0)
         {
            mode = !mode;
            putc(mode);
            while(input(ON_OFF)==0);
         }
      }
      
      output_toggle(pin_d0);
      delay_ms((1000*time)/2);
   }
}

#INT_RDA
void interrupt_rcv_data()
{
   rcv_data = getc();
   time = rcv_data;
}*/

#include <16f887.h>
#fuses INTRC_IO
#use delay(clock=8M)
#use RS232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)

#define LED     PIN_D0
#define BUTTON  PIN_B0

int1 mode = 0;
unsigned int8 time = 100;  // Default blink time in ms
unsigned int16 count = 0;

#INT_TIMER0
void TIMER0_ISR() {
   set_timer0(60);  // ~1ms for 8MHz with 256 prescaler

   count++;
   if(count >= time) {
      count = 0;
      if(mode)
         output_toggle(LED);
      else
         output_low(LED);
   }
}

#INT_RDA
void RDA_ISR() {
   time = getc();
   if(time == 0) time = 1;  // Avoid division by zero
}

void main() {
   set_tris_c(0x80);  // RX as input
   set_tris_d(0);     // Port D output
   set_tris_b(1);     // Button input

   output_low(LED);

   setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256);
   set_timer0(60);
   enable_interrupts(INT_TIMER0);
   enable_interrupts(INT_RDA);
   enable_interrupts(GLOBAL);

   while(TRUE) {
      if(!input(BUTTON)) {
         delay_ms(20);  // Debounce
         if(!input(BUTTON)) {
            mode = !mode;
            putc(mode);
            while(!input(BUTTON));  // Wait for release
         }
      }
   }
}

