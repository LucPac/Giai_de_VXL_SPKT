CCS PCM C Compiler, Version 5.015, 5967               11-May-25 15:00

               Filename:   E:\University\Nam 3\2024_2025_HK2\Vi xu ly\Giai_de_vxl_hk2_22_23_dtcn_ys\Cau4\PicB.lst

               ROM used:   218 words (3%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           22 (6%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   066
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
004F:  MOVLW  10
0050:  MOVWF  30
0051:  CLRF   77
0052:  CLRF   7A
0053:  RRF    2D,F
0054:  RRF    2C,F
0055:  BTFSS  03.0
0056:  GOTO   05D
0057:  MOVF   2E,W
0058:  ADDWF  77,F
0059:  BTFSC  03.0
005A:  INCF   7A,F
005B:  MOVF   2F,W
005C:  ADDWF  7A,F
005D:  RRF    7A,F
005E:  RRF    77,F
005F:  RRF    79,F
0060:  RRF    78,F
0061:  DECFSZ 30,F
0062:  GOTO   053
0063:  BCF    0A.3
0064:  BCF    0A.4
0065:  GOTO   0C3 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses intrc_io 
.................... #use delay(clock=8M) 
*
003B:  MOVLW  2F
003C:  MOVWF  04
003D:  BCF    03.7
003E:  MOVF   00,W
003F:  BTFSC  03.2
0040:  GOTO   04E
0041:  MOVLW  02
0042:  MOVWF  78
0043:  CLRF   77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  DECFSZ 78,F
0047:  GOTO   043
0048:  MOVLW  97
0049:  MOVWF  77
004A:  DECFSZ 77,F
004B:  GOTO   04A
004C:  DECFSZ 00,F
004D:  GOTO   041
004E:  RETURN
....................  
.................... #use RS232 (baud =9600,xmit=pin_c6, rcv=pin_c7) 
....................  
.................... #define ON_OFF pin_b0 
....................  
.................... unsigned int8 time=0, i=0; 
.................... int1 mode=0; 
.................... unsigned int8 rcv_data=0; 
....................  
.................... /*void ham_delay() 
.................... { 
....................    for(i=0;i<=time;i++) 
....................    { 
....................       output_toggle(pin_d0); 
....................        
....................       if(input(ON_OFF)==0) 
....................       { 
....................          delay_ms(20); 
....................          if(input(ON_OFF)==0) 
....................          { 
....................             mode = !mode; 
....................             putc(mode); 
....................             while(input(ON_OFF)==0); 
....................          } 
....................       } 
....................    } 
.................... }*/ 
.................... void main () 
*
0066:  MOVF   03,W
0067:  ANDLW  1F
0068:  MOVWF  03
0069:  MOVLW  71
006A:  BSF    03.5
006B:  MOVWF  0F
006C:  MOVF   0F,W
006D:  BSF    03.6
006E:  BCF    07.3
006F:  MOVLW  0C
0070:  BCF    03.6
0071:  MOVWF  19
0072:  MOVLW  A2
0073:  MOVWF  18
0074:  MOVLW  90
0075:  BCF    03.5
0076:  MOVWF  18
0077:  CLRF   27
0078:  CLRF   28
0079:  BCF    29.0
007A:  CLRF   2A
007B:  MOVLW  FF
007C:  MOVWF  2B
007D:  BSF    03.5
007E:  BSF    03.6
007F:  MOVF   09,W
0080:  ANDLW  C0
0081:  MOVWF  09
0082:  BCF    03.6
0083:  BCF    1F.4
0084:  BCF    1F.5
0085:  MOVLW  00
0086:  BSF    03.6
0087:  MOVWF  08
0088:  BCF    03.5
0089:  CLRF   07
008A:  CLRF   08
008B:  CLRF   09
008C:  BCF    03.7
.................... { 
....................    set_tris_c(0x80); 
008D:  MOVLW  80
008E:  BSF    03.5
008F:  BCF    03.6
0090:  MOVWF  07
0091:  BCF    03.5
0092:  MOVWF  2B
....................    set_tris_d(0);  
0093:  MOVLW  00
0094:  BSF    03.5
0095:  MOVWF  08
....................    set_tris_b(1);  
0096:  MOVLW  01
0097:  MOVWF  06
....................     
....................    enable_interrupts(GLOBAL); 
0098:  MOVLW  C0
0099:  BCF    03.5
009A:  IORWF  0B,F
....................    enable_interrupts(INT_RDA);  
009B:  BSF    03.5
009C:  BSF    0C.5
....................  
....................    while(true) 
....................    { 
....................       if(input(ON_OFF)==0) 
009D:  BSF    06.0
009E:  BCF    03.5
009F:  BTFSC  06.0
00A0:  GOTO   0B6
....................       { 
....................          delay_ms(20); 
00A1:  MOVLW  14
00A2:  MOVWF  2F
00A3:  CALL   03B
....................          if(input(ON_OFF)==0) 
00A4:  BSF    03.5
00A5:  BSF    06.0
00A6:  BCF    03.5
00A7:  BTFSC  06.0
00A8:  GOTO   0B6
....................          { 
....................             mode = !mode; 
00A9:  MOVLW  01
00AA:  XORWF  29,F
....................             putc(mode); 
00AB:  MOVLW  00
00AC:  BTFSC  29.0
00AD:  MOVLW  01
00AE:  BTFSS  0C.4
00AF:  GOTO   0AE
00B0:  MOVWF  19
....................             while(input(ON_OFF)==0); 
00B1:  BSF    03.5
00B2:  BSF    06.0
00B3:  BCF    03.5
00B4:  BTFSS  06.0
00B5:  GOTO   0B1
....................          } 
....................       } 
....................        
....................       output_toggle(pin_d0); 
00B6:  BSF    03.5
00B7:  BCF    08.0
00B8:  MOVLW  01
00B9:  BCF    03.5
00BA:  XORWF  08,F
....................       delay_ms((1000*time)/2); 
00BB:  MOVLW  03
00BC:  MOVWF  2D
00BD:  MOVLW  E8
00BE:  MOVWF  2C
00BF:  CLRF   2F
00C0:  MOVF   27,W
00C1:  MOVWF  2E
00C2:  GOTO   04F
00C3:  MOVF   79,W
00C4:  MOVWF  2D
00C5:  MOVF   78,W
00C6:  MOVWF  2C
00C7:  BCF    03.0
00C8:  RRF    2D,F
00C9:  RRF    2C,F
00CA:  MOVF   2D,W
00CB:  MOVWF  2E
00CC:  INCF   2E,F
00CD:  DECF   2E,F
00CE:  BTFSC  03.2
00CF:  GOTO   0D4
00D0:  MOVLW  FF
00D1:  MOVWF  2F
00D2:  CALL   03B
00D3:  GOTO   0CD
00D4:  MOVF   2C,W
00D5:  MOVWF  2F
00D6:  CALL   03B
00D7:  BSF    03.5
00D8:  GOTO   09D
....................       //ham_delay(); 
....................    } 
.................... } 
....................  
.................... #INT_RDA 
.................... void interrupt_rcv_data() 
00D9:  SLEEP
.................... { 
....................    rcv_data = getc(); 
*
0031:  BTFSS  0C.5
0032:  GOTO   031
0033:  MOVF   1A,W
0034:  MOVWF  2A
....................    time = rcv_data; 
0035:  MOVF   2A,W
0036:  MOVWF  27
0037:  BCF    0C.5
0038:  BCF    0A.3
0039:  BCF    0A.4
003A:  GOTO   01D
.................... } 

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
