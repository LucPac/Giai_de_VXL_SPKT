CCS PCM C Compiler, Version 5.015, 5967               24-May-25 11:08

               Filename:   E:\University\Nam 3\2024_2025_HK2\Vi xu ly\Giai_de_vxl_hk2_22_23_dtcn_ys\Cau2\Cau 2.lst

               ROM used:   125 words (2%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           10 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   01E
0003:  NOP
.................... /* 
.................... Tinh toan cac thong so 
.................... - PWM1:  Chon T2_prescale = 16 --> PR2 = 249 
....................          HSCK_70% = 70% * HSCK_max = 70% * (249 + 1)*4 = 700 
....................           
.................... - PWM2:  Chon T2_prescale = 16 --> PR2 = 249 
....................          HSCK_30% = 30% * HSCK_max = 30% * (249 + 1)*4 = 300 
.................... */ 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #fuses hs 
.................... #use delay (clock=8m) 
....................  
.................... #define FF        pin_b0 
.................... #define REV       pin_b1 
.................... #define STOP      pin_e3 
....................  
.................... int1 mode_pwm1=0, mode_pwm2=0; //=0: off, =1:on 
.................... unsigned int8 duty1=0, duty2=0; 
....................  
.................... void nut_nhan() 
.................... { 
....................    if(input(FF)==0) 
0004:  BSF    03.5
0005:  BSF    06.0
0006:  BCF    03.5
0007:  BTFSC  06.0
0008:  GOTO   00C
....................    { 
....................       mode_pwm1 = 1; 
0009:  BSF    20.0
....................       mode_pwm2 = 0; 
000A:  BCF    20.1
....................    } 
000B:  GOTO   01B
....................    else if(input(REV)==0) 
000C:  BSF    03.5
000D:  BSF    06.1
000E:  BCF    03.5
000F:  BTFSC  06.1
0010:  GOTO   014
....................    { 
....................       mode_pwm1 = 0; 
0011:  BCF    20.0
....................       mode_pwm2 = 1;       
0012:  BSF    20.1
....................    } 
0013:  GOTO   01B
....................    else if(input(STOP)==0) 
0014:  BSF    03.5
0015:  BSF    09.3
0016:  BCF    03.5
0017:  BTFSC  09.3
0018:  GOTO   01B
....................    { 
....................       mode_pwm1 = 0; 
0019:  BCF    20.0
....................       mode_pwm2 = 0;       
001A:  BCF    20.1
....................    } 
001B:  BCF    0A.3
001C:  BCF    0A.4
001D:  GOTO   068 (RETURN)
.................... } 
....................  
....................  
.................... void main () 
001E:  MOVF   03,W
001F:  ANDLW  1F
0020:  MOVWF  03
0021:  BCF    20.0
0022:  BCF    20.1
0023:  CLRF   21
0024:  CLRF   22
0025:  MOVLW  FF
0026:  MOVWF  23
0027:  BSF    03.5
0028:  BSF    03.6
0029:  MOVF   09,W
002A:  ANDLW  C0
002B:  MOVWF  09
002C:  BCF    03.6
002D:  BCF    1F.4
002E:  BCF    1F.5
002F:  MOVLW  00
0030:  BSF    03.6
0031:  MOVWF  08
0032:  BCF    03.5
0033:  CLRF   07
0034:  CLRF   08
0035:  CLRF   09
0036:  BCF    03.7
.................... { 
....................    set_tris_c(0); 
0037:  MOVLW  00
0038:  BSF    03.5
0039:  BCF    03.6
003A:  MOVWF  07
003B:  BCF    03.5
003C:  MOVWF  23
....................    set_tris_b(0xff); 
003D:  MOVLW  FF
003E:  BSF    03.5
003F:  MOVWF  06
....................    set_tris_e(0xff); 
0040:  BSF    09.0
0041:  BSF    09.1
0042:  BSF    09.2
0043:  BSF    09.3
....................     
....................    setup_timer_2(T2_DIV_BY_16,249,1); 
0044:  MOVLW  00
0045:  MOVWF  78
0046:  IORLW  06
0047:  BCF    03.5
0048:  MOVWF  12
0049:  MOVLW  F9
004A:  BSF    03.5
004B:  MOVWF  12
....................    setup_ccp1(CCP_PWM);     // su dung kenh PWM1 
004C:  BCF    03.5
004D:  BCF    23.2
004E:  MOVF   23,W
004F:  BSF    03.5
0050:  MOVWF  07
0051:  BCF    03.5
0052:  BCF    07.2
0053:  MOVLW  0C
0054:  MOVWF  17
0055:  BSF    03.5
0056:  CLRF   1B
0057:  CLRF   1C
0058:  MOVLW  01
0059:  MOVWF  1D
....................    set_pwm1_duty(duty1);      // ngung dong co  
005A:  BCF    03.5
005B:  MOVF   21,W
005C:  MOVWF  15
....................    setup_ccp2(CCP_PWM);     // su dung kenh PWM2 
005D:  BCF    23.1
005E:  MOVF   23,W
005F:  BSF    03.5
0060:  MOVWF  07
0061:  BCF    03.5
0062:  BCF    07.1
0063:  MOVLW  0C
0064:  MOVWF  1D
....................    set_pwm2_duty(duty2);      // ngung dong co  
0065:  MOVF   22,W
0066:  MOVWF  1B
....................     
....................    while(true) 
....................    { 
....................       nut_nhan(); 
0067:  GOTO   004
....................        
....................       if(mode_pwm1) 
0068:  BTFSS  20.0
0069:  GOTO   072
....................       { 
....................          duty1=700; 
006A:  MOVLW  BC
006B:  MOVWF  21
....................          duty2=0; 
006C:  CLRF   22
....................          set_pwm1_duty(duty1); 
006D:  MOVF   21,W
006E:  MOVWF  15
....................          set_pwm2_duty(duty2); 
006F:  MOVF   22,W
0070:  MOVWF  1B
....................       } 
0071:  GOTO   07B
....................       else if(mode_pwm2) 
0072:  BTFSS  20.1
0073:  GOTO   07B
....................       { 
....................          duty1=0; 
0074:  CLRF   21
....................          duty2=300; 
0075:  MOVLW  2C
0076:  MOVWF  22
....................          set_pwm1_duty(duty1); 
0077:  MOVF   21,W
0078:  MOVWF  15
....................          set_pwm2_duty(duty2); 
0079:  MOVF   22,W
007A:  MOVWF  1B
....................       } 
007B:  GOTO   067
....................    } 
.................... } 
007C:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
